'use strict'
/**
 * Module dependencies.
 */
var mongoose = require('mongoose');
require('../models/users.js');
var User = mongoose.model('User');


// Register a user
module.exports.userRegistration = function (req, res) {
  /* assert can be used to check on all 3 types of params 
   * req.body, req.params(URL params) and req.query(GET params). 
   * For more : https://www.npmjs.com/package/express-validator */
  req.assert('firstName', 'First name is required.').notEmpty();
  req.assert('lastName', 'Last name is required.').notEmpty();
  req.assert('email', 'Email address is required.').notEmpty();
  req.assert('email', 'Email address is not valid.').isEmail();
  req.assert('phone', 'Phone number is required.').notEmpty();
  req.assert('phone', 'Phone number is not valid.').isInt().len(10);// minimum 10 digits
  req.assert('password', 'Password is required.').notEmpty();
  req.assert('password', 'Password must be between 8-20 characters long.').len(8, 20);
  req.assert('confirmPassword', 'Confirm password is required.').notEmpty();
  req.assert('confirmPassword', 'Passwords do not match.').equals(req.body.password);

  var errors = req.validationErrors();
  if (errors) {
    res.send(errors[0].msg); return;
  }

  var newUser = new User(req.body);
  userName: req.body.email.substring(0, req.body.email.indexOf("@")),

    // Attempt to save the user
    newUser.save(function (err, data) {
      if (err) {
        console.log(err)
        // Check for Validation error in  err object
        if (err.name == 'ValidationError') {
          return res.status(400).json({ success: false, message: err.message });
        }
        // Check for Mongo  error in  err object
        if (err.name == 'MongoError') {
          return res.status(400).json({ success: false, message: 'That email address already exists.' });
        }
        return res.status(400).json({ success: false, message: err.name });
      }
      res.status(200).json({ success: true, message: 'Successfully created new user.' });
    });
}

// Update a user
module.exports.updateUser = function (req, res) {
  // update query
  var query = {
    $set: {
      firstName: req.body.firstName,
      lastName: req.body.lastName,
      nickName: req.body.nickName,
      phone: req.body.phone,
      dateOfBirth: req.body.dateOfBirth,
      city: req.body.city,
      state: req.body.state,
      zipCode: req.body.zipCode,
      licenceNo: req.body.licenceNo,
      licenceState: req.body.licenceState,
      licenceExpDate: req.body.licenceExpDate
    }
  }
  // Attempt to update the user
  User.findByIdAndUpdate({ _id: req.body.id }, query, function (err) {
    if (err) {
      return res.status(400).json({ success: false, message: 'Server error.' });
    }
    res.status(200).json({ success: true, message: 'Successfully updated user.' });
  });
}





// // User login
// module.exports.userLogin = function (req, res) {
//   req.assert('email', 'Email address is required').notEmpty();
//   req.assert('email', 'Email address is not valid').isEmail();
//   req.assert('password', 'Password is required').notEmpty();

//   var errors = req.validationErrors();
//   if (errors) {
//     res.send(errors[0].msg); return;
//   }
//   // User.findOne({
//   //   email: req.body.email
//   // }, function (err, user) {
//   //   console.log(user)
//   //   if (err) throw err;
//   //   if (!user) {
//   //     //  If no user found in database for perticular email or username
//   //     res.status(400).json({ success: false, message: 'Authentication failed. User not found.' });
//   //   } else {
//   //     // Create token if the password matched and no error was thrown
//   //     var token = jwt.sign(user, config.secret, {
//   //       expiresIn: config.tokenExpiresIn
//   //     });
//   //     // return with response with TWT Token
//   //     res.status(200).json({ success: true, token: 'JWT ' + token });
//   //   }
//   // });

//   //  User.findOne({
//   //   email: req.body.email
//   // }, function (err, user) {
//   //   console.log(user)
//   //   if (err) throw err;
//   //   if (!user) {
//   //     //  If no user found in database for perticular email or username
//   //     res.status(400).json({ success: false, message: 'Authentication failed. User not found.' });
//   //   }
//   //   if (!user.validPassword(password)){
//   //     // Create token if the password matched and no error was thrown
//   //     var token = jwt.sign(user, config.secret, {
//   //       expiresIn: config.tokenExpiresIn
//   //     });
//   //     // return with response with TWT Token
//   //     res.status(200).json({ success: true, token: 'JWT ' + token });
//   //   }
//   // });
// }

