'use strict'
/**
 * Module dependencies.
 */
var mongoose = require('mongoose');
var config = require('../config/development.js');
var jwt = require('jsonwebtoken');

require('../models/users.js');
var User = mongoose.model('User');



// Register a user
module.exports.userRegistration = function (req, res) {
    /* assert can be used to check on all 3 types of params 
     * req.body, req.params(URL params) and req.query(GET params). 
     * For more : https://www.npmjs.com/package/express-validator */

    req.assert('firstName', 'First name is required').notEmpty();
    req.assert('email', 'Email address is required').notEmpty();
    req.assert('email', 'Email address is not valid').isEmail();
    req.assert('password', 'Password is required').notEmpty();
    req.assert('phone', 'Phone number is required').notEmpty();
    req.assert('phone', 'Phone number is not valid').isInt();

    var errors = req.validationErrors();
    if (errors) {
        res.send(errors[0].msg); return;
    }
    var newUser = new User({
        email: req.body.email,
        password: req.body.password,
        firstName: req.body.firstName,
        middleName: req.body.middleName ? req.body.middleName : '',
        lastName: req.body.lastName ? req.body.lastName : '',
        phone: req.body.phone,
        userName: req.body.email.substring(0, req.body.email.indexOf("@")),
    });

    // Attempt to save the user
    newUser.save(function (err) {
        if (err) {
            return res.status(400).json({ success: false, message: 'That email address already exists.' });
        }
        res.status(200).json({ success: true, message: 'Successfully created new user.' });
    });
}


// User login function
module.exports.userLogin = function (req, res) {
    req.assert('email', 'Email address is required').notEmpty();
    req.assert('email', 'Email address is required').isEmail();
    req.assert('password', 'Password is required').notEmpty();

    var errors = req.validationErrors();
    if (errors) {
        res.send(errors[0].msg); return;
    }

    User.findOne({
        email: req.body.email
    }, function (err, user) {
        if (err) throw err;

        if (!user) {
            //  If no user found in database for perticular eamil or username
            res.status(400).json({ success: false, message: 'Authentication failed. User not found.' });
        } else {
            // Check if password matches
            user.comparePassword(req.body.password, function (err, isMatch) {
                if (isMatch && !err) {
                    // Create token if the password matched and no error was thrown
                    var token = jwt.sign(user, config.secret, {
                        expiresIn: config.tokenExpiresIn
                    });
                    // return with response with TWT Token
                    res.status(200).json({ success: true, token: 'JWT ' + token });
                } else {
                    // Return on error
                    res.status(400).json({ success: false, message: 'Authentication failed. Passwords did not match.' });
                }
            });
        }
    });
}

