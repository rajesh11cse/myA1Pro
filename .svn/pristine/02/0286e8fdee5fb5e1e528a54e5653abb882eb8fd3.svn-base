'use strict'

// config/passport.js

// load all the things we need
var JwtStrategy = require('passport-jwt').Strategy,
  ExtractJwt = require('passport-jwt').ExtractJwt,
  LocalStrategy = require('passport-local').Strategy,
  FacebookStrategy = require('passport-facebook').Strategy,
  User = require('../models/users'), // load up the user model
  configAuth = require('./auth');// load the auth variables

module.exports = function (passport) {

  // used to serialize the user for the session
  passport.serializeUser(function (user, done) {
    done(null, user._id);
  });

  // used to deserialize the user
  passport.deserializeUser(function (id, done) {
    User.findById(id, function (err, user) {
      done(err, user);
    });
  });



  // =========================================================================
  // LOCAL LOGIN =============================================================
  // =========================================================================

  passport.use('local-login', new LocalStrategy({
    // by default, local strategy uses username and password, we will override with email
    usernameField: 'email',
    passwordField: 'password',
    passReqToCallback: true // allows us to pass back the entire request to the callback
  },
    function (req, email, password, done) { // callback with email and password from our form
      // find a user whose email is the same as the forms email
      // we are checking to see if the user trying to login already exists
      User.findOne({ 'email': email }, function (err, user) {
        // if there are any errors, return the error before anything else
        if (err)
          return done(err);

        // if no user is found, return the message
        if (!user)
          // return the object with error message 
          return done(null, false, { message: "No user found." });

        // if the user is found but the password is wrong
        if (!user.validPassword(password))
          // return the object with error message 
          return done(null, false, { message: "Oops! Wrong password." }); // create the loginMessage and save it to session as flashdata

        // all is well, return successful user
        return done(null, user);
      });
    }
  ));


  // =========================================================================
  // FACEBOOK LOGIN ==========================================================
  // =========================================================================
  passport.use(new FacebookStrategy({

    // pull in our app id and secret from our auth.js file
    clientID: configAuth.facebookAuth.clientID,
    clientSecret: configAuth.facebookAuth.clientSecret,
    callbackURL: configAuth.facebookAuth.callbackURL,
     profileFields   : configAuth.facebookAuth.profileFields

  },

    // facebook will send back the token and profile
    function (token, refreshToken, profile, done) {
      // asynchronous
      process.nextTick(function () {

        // find the user in the database based on their facebook id
        User.findOne({ 'facebookId': profile.id }, function (err, user) {
          // if there is an error, stop everything and return that
          // ie an error connecting to the database
          if (err)
            return done(err);
          // if the user is found, then log them in
          if (user) {
            console.log(user)
            return done(null, false, { message: "User alredy exists." });
          } else {
              console.log("coming..")
            // if there is no user found with that facebook id, create them
            var newUser = new User();
              var facebookEmail = profile.emails[0].value;// facebook can return multiple emails so we'll take the first
            // set all of the facebook information in our user model
            newUser.facebookId = profile.id; // set the users facebook id                   
          //  newUser.facebook.token = token; // we will save the token that facebook provides to the user                    
            newUser.firstName = profile.name.givenName; // 
            newUser.middleName = profile.name.middleName; // look at the passport user profile to see how names are returned
            newUser.lastName = profile.name.familyName; // look at the passport user profile to see how names are returned
            newUser.email = facebookEmail; 
            newUser.userName = facebookEmail.substring(0, facebookEmail.indexOf("@"));
            newUser.loginType = 'facebook'
            newUser.password = '12345'
            // save our user to the database
            newUser.save(function (err) {
              if (err)
                throw err;
              // if successful, return the new user
              return done(null, newUser);
            });
          }
        });
      });

    }));


  // =========================================================================
  // USE JWT TO SET TOKEN ====================================================
  // =========================================================================
  var opts = {};
  opts.jwtFromRequest = ExtractJwt.fromAuthHeader();
  opts.secretOrKey = configAuth.secret;
  passport.use(new JwtStrategy(opts, function (jwt_payload, done) {
    User.findOne({ _id: jwt_payload._doc._id }, function (err, user) {
      if (err) {
        return done(err, false);
      }
      if (user) {
        done(null, user);
      } else {
        done(null, false);
      }
    });
  }));
};




