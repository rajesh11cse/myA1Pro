var mongoose = require('mongoose');
var bcrypt = require('bcrypt');

// Schema defines how the user's data will be stored in MongoDB
var UserSchema = new mongoose.Schema({
  firstName: {
    type: String,
    required: true
  },

  middleName: {
    type: String,
    reuired: false,
  },

  lastName: {
    type: String,
    reuired: false,
  },

  email: {
    type: String,
    lowercase: true,
    unique: true,
    required: true,
  },

  password: {// hashed password only
    type: String,
    required: false // False for facebook user
  },

  phone: {
    type: Number,
    required: false,// False for facebook user
  },

  userName: {
    type: String,
    required: true,
  },

  role: {
    type: String,
    enum: ['Client', 'Manager', 'Admin'],
    default: 'Client'
  },

  createdAt: {
    type: Date
  },

  updatedAt: {
    type: Date
  },

  loginType: {
    type: String,
    default: 'local'
  },

  facebookId: {
    type: Number
  },

});

// Saves the user's password hashed (plain text password storage is not good)
UserSchema.pre('save', function (next) {
  var user = this;
  var now = new Date();
  this.updatedAt = now;
  if (!this.createdAt) {
    this.createdAt = now;
  }
  if (this.isModified('password') || this.isNew) {
    bcrypt.genSalt(10, function (err, salt) {
      if (err) {
        return next(err);
      }
      bcrypt.hash(user.password, salt, function (err, hash) {
        if (err) {
          return next(err);
        }
        user.password = hash;
        next();
      });
    });
  } else {
    return next();
  }
});

// Create method to compare password input to password saved in database
// UserSchema.methods.comparePassword = function (pw, cb) {
//   bcrypt.compare(pw.toString(), this.password, function (err, isMatch) {
//     if (err) {
//       return cb(err);
//     }
//     cb(null, isMatch);
//   });
// };


// checking if password is valid
UserSchema.methods.validPassword = function (password) {
  return bcrypt.compareSync(password, this.password);
};



module.exports = mongoose.model('User', UserSchema);